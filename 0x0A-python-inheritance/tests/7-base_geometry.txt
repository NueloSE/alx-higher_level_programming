Test for module ``7-base_geometry``
===================================

import module
-------------
::
    >>> base = __import__('7-base_geometry').BaseGeometry

Test with valid argument:
-------------------------
::
    >>> bg = base()
    >>> bg.integer_validator("some", 43)

    
The second argument is float or string
--------------------------------------

::
    >>> bg.integer_validator("Nuelo", 32.3)
    Traceback (most recent call last):
    TypeError: Nuelo must be an integer

    >>> bg.integer_validator("Nuelo", '32.3')
    Traceback (most recent call last):
    TypeError: Nuelo must be an integer

The second is zero or negative
------------------------------

::
    >>> bg.integer_validator("okay", 0)
    Traceback (most recent call last):
    ValueError: okay must be greater than 0
    >>> bg.integer_validator('okay', -4)
    Traceback (most recent call last):
    ValueError: okay must be greater than 0

Test with one argument:
-----------------------
::
    >>> bg.integer_validator("something")
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg.integer_validator()
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test for area()
---------------

    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

Testing for non integer
-----------------------
    >>> bg.integer_validator("tuple", (4,))
    Traceback (most recent call last):
    TypeError: tuple must be an integer
    
    >>> bg.integer_validator('list', [3])
    Traceback (most recent call last):
    TypeError: list must be an integer
    
    >>> bg.integer_validator("age", True)
    

    >>> bg.integer_validator('dict', {3,5})
    Traceback (most recent call last):
    TypeError: dict must be an integer

    >>> bg.integer_validator('None', None)
    Traceback (most recent call last):
    TypeError: None must be an integer
