The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------

This is an example text file in reStructuredText format. First import ``add_integer``
from the ``0-add_integer`` module:

    >>> add_integer = __import__('0-add_integer').add_integer

Now using it:
-------------

Numbers
=======

The function works with 2 integer values

::
    >>> add_integer(1, 2)
    3
    >>> add_integer(100, -2)
    98

The second value can be optional and it default value is 98

::
    >>> add_integer(2)
    100

The function works with float value by first converting the float to an integer
and return an integer value

::
    >>> add_integer(100.3, -2)
    98

Non-Numbers
===========

``add_integer()`` expects both arguments to be integer or float values.
If either arg is non-integer and non-float, a TypeError is raised:

::
    >>> add_integer(4, "School")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

::
    >>> add_integer("School", 5)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

::
    >>> add_integer(None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

::
    >>> add_integer(2.2, None)
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is printed for just
the first argument
::
    >>> add_integer("3", '5')
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

When called without any argument it raises an 1 positional argument
::
    >>> add_integer()
    Traceback (most recent call last):
        ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

Fails when inifinity is passed
::
    >>> add_integer(float('inf'))
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer
